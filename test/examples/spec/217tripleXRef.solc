
forall any.function undefined() -> any {
  assembly {
    revert(0,0)
  };
}

function add(x : word, y : word) {
  let res: word;
  assembly {
     res := add(x, y)
  };
  return res;
}

class  ref : Ref(deref) {
  function load (r:ref) -> deref;
  function store(r:ref, v:deref) -> unit;
}

instance stack(a) : Ref(a) {}

data Sel3_1 = Sel3_1;
data Sel3_2 = Sel3_2;
data Sel3_3 = Sel3_3;

// data MemberAccess(ty, field) = MemberAccess(ty);
// instance MemberAccess(stack((a,b)), Sel3_1):Ref(a) {}
// instance MemberAccess(stack((a,b)), Sel3_2):Ref(b) {}


pragma no-bounded-variable-condition Ref;
pragma no-patterson-condition Ref;
data XRef(st, field, fieldType) = XRef(st, field);
instance (r:Ref( (a,b,c) ) )=>  XRef(r, Sel3_1, a) : Ref(a) {}
instance (r:Ref( (a,b,c) ) )=>  XRef(r, Sel3_2, b) : Ref(b) {}
instance (r:Ref( (a,b,c) ) )=>  XRef(r, Sel3_3, c) : Ref(c) {}


contract AssignPR {
  function fst(p) {
    match p {
      | (a,b) => return a;
    };
  }

  function snd(p) {
    match p {
      | (a,b) => return b;
    };
  }

  function sumPair(p) {
    match p {
      | (a,b) => return add(a,b);
    };
  }


  function sel3_2(t) {
    match t {
      | (a,b,c) => return b;
    };
  }

  function main() {
    // let x : (word, word) = (17, 7) ;
    let x : stack( (word, word, word) );
    let y : stack( (word, word, word) );
    let z : stack( (word, word, word) );

    Ref.store(y, (1,2,3));

    // FIXME: #72
    Ref.store(x, (17, 42, 25));
    // x.1 = 25
    Ref.store(XRef(x, Sel3_1), 25);
    // x.2 = 21
    Ref.store(XRef(x, Sel3_2), 212);

    Ref.store( z, Ref.load(x));

    return sel3_2(Ref.load(z)); // TODO XRef
  }
}