

function add(x : word, y : word) {
  let res: word;
  assembly {
     res := add(x, y)
  };
  return res;
}

function sub(x : word, y : word) {
  let res: word;
  assembly {
     res := sub(x, y)
  };
  return res;
}

function div(x : word, y: word) {
  let res: word;
  assembly {
     res := div(x, y)
  };
  return res;
}

function sdiv(x : word, y: word) {
  let res: word;
  assembly {
     res := sdiv(x, y)
  };
  return res;
}

function mod(x : word, y: word) {
  let res: word;
  assembly {
     res := mod(x, y)
  };
  return res;
}

function smod(x : word, y: word) {
  let res: word;
  assembly {
     res := smod(x, y)
  };
  return res;
}

function exp(x : word, y: word) {
  let res: word;
  assembly {
     res := exp(x, y)
  };
  return res;
}


contract Arith {
  function main() {
    return add(mod(sub(div(exp(2,18),4), 1), 16), 27);
  }
}
