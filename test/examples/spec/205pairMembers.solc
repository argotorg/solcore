
forall any.function revert(a:word,b:word) -> any {
  assembly {
    revert(a,b)
  };
}

function add(x : word, y : word) {
  let res: word;
  assembly {
     res := add(x, y)
  };
  return res;
}

class  ref : Ref(deref) {
  function load (r:ref) -> deref;
  function store(r:ref, v:deref) -> unit;
}

instance stack(a) : Ref(a) {
   // these definitions will not be used
  function load(r) { return(revert(0,0)); }
  function store(r, v) { revert(0,0);  }
}

// how to do x.first = z ?
// store(first(x), load(z))
// requires function on references

/*
class self : HasFirst(a) { function first(s:self) -> a; }
instance stack((a,b)) : HasFirst(stack(a)) {
  // first : stack((a,b)) -> stack(a);
  // probably needs to be an intrinsic?
  function first(pr:stack((a,b))){
    return(revert(0,0)); // FIXME: this does not typecheck. WHY?
  }
}  
*/

data MemberAccess(ty, field) = MemberAccess(ty);

data PairFst = PairFst;
data PairSnd = PairSnd;

instance MemberAccess(stack((a,b)), PairFst):Ref(a) {}
instance MemberAccess(stack((a,b)), PairSnd):Ref(b) {}

contract AssignPR {
  function fst(p) {
    match p {
      | (a,b) => return a;
    };
  }

  function snd(p) {
    match p {
      | (a,b) => return b;
    };
  }

  function sumPair(p) {
    match p {
      | (a,b) => return add(a,b);
    };
  }


  function main() {
    // let x : (word, word) = (17, 7) ;
    let x : stack((word, word));
    Ref.store(x, (17, 7));

    // x.fst = 25
    Ref.store(MemberAccess(x):MemberAccess(stack((word,word)), PairFst), 25);
    // slight problem: not referentially transparent, hard to make code below work
    // let fstAccess  = MemberAccess(x);
    // Ref.store(fstAccess, 42);

    // x.snd = 17
    Ref.store(MemberAccess(x):MemberAccess(stack((word,word)), PairSnd), 17);
    
    let y : stack((word, word));    
    // y = x;
    Ref.store(y, Ref.load(x));

    // return sumPair(y);
    return sumPair(Ref.load(y));

    // return add(y.fst,  y.snd)
  }  
}