import assign;
 
function caller() -> address {
  let res: word;
  assembly {
     res := caller()
  }
  return address(res);
}

function require1fail() {
  let res: word;
  assembly {
    mstore(0x0, 0x72657175697265313a204641494c) // "require1: FAIL"
    revert(0,32)
  }
  return (); // for the typechecker
}

function require1(cond: bool) {
    match cond {
    | false => return require1fail();
    | true => return ();
  }
}

function nop() -> () { return ();}

contract Mini {
  reserved : word;
  msg_sender : address; // mock msg.sender
  owner : address;
  decimals : uint;
  totalSupply : uint;
  balances : mapping(address,uint);
  allowance : mapping(address, mapping(address, uint));

  function mint(amount:uint) -> () {
    balances[owner] = Num.add(balances[owner], amount);
    totalSupply = Num.add(totalSupply, amount);
  }

/*  // original:
    function transferFrom(address src, address dst, uint amt) public returns (bool) {
        require(balanceOf[src] >= amt, "token/insufficient-balance");
        if (src != msg.sender && allowance[src][msg.sender] != type(uint).max) {
            require(allowance[src][msg.sender] >= amt, "token/insufficient-allowance");
            allowance[src][msg.sender] -= amt;
        }

        balanceOf[src] -= amt;
        balanceOf[dst] += amt;
        emit Transfer(src, dst, amt);
        return true;
    }
*/

//  function transferFrom(src:address, dst:address, amt:uint) -> bool {
  function transferFrom(src, dst, amt) -> bool  {
     require1(ge(balances[src], amt));

     match (Eq.eq(src, msg_sender)) {
       | true => match ne(allowance[src][msg_sender], Num.maxVal():uint) {
           | true => require1(false);
	   | false => ();
	   }
       | false => ();
     }

/*
     if ((src != msg_sender) && (allowance [src][msg_sender] != (Num.maxVal():uint)) ) {
       require1(allowance[src][msg.sender] >= amt);
     }
*/   
     balances[src] = Num.sub(balances[src], amt);
     balances[dst] = Num.add(balances[dst], amt):uint;
     return true;
  }

/*
    function approve(address usr, uint amt) public returns (bool) {
        allowance[msg.sender][usr] = amt;
        emit Approval(msg.sender, usr, amt);
        return true;
    }
*/


  function init() -> () {
    owner = address(0x123456789abcdef);
    msg_sender = caller();
    decimals = Num.fromWord(18);
  }

  function main() -> uint {
    init();
    mint(uint(1000));
    allowance[owner][msg_sender] = uint(10000);
    transferFrom(owner, msg_sender, uint(42));

    return balances[msg_sender] : uint;
  }
}
