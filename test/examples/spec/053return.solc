data Bool = False | True;
data W = W(word);


/* For experiments, special handling when emitting code */
function ereturn(x:a) -> b { let res: b; return res; }

/* simulate match expression
  x = match { | False => return 77; | True => W(22) }
*/
function elimBool1(b:Bool) -> word {
   let x : W;
   x = W(1);
   match b {
      // this works
      | False => x = ereturn(77);
      // what about "return(return 77)"?
      // this does not work (monomorphisation fails)
      // | False => x = ereturn(ereturn(77));

      | True  => x = W(22);
   }

   match x {
     | W(y) => return y;
   }

}


contract ExpReturn {
  function main() -> word {
    return elimBool1(False);
    // return elimBool1(True);
  }
}
