data Bool = False | True; 
data W = W(word);
data U = U;


/* For experiments, special handling when emitting code */
// this does not work, typechecker forces a ~ b
// function ereturn(x:a) -> b { let res: b; return res; }
// we might have
// function ereturn(x:a) -> a
// or

function ereturn(x:a) -> unit { let res: unit; return res; }
// and then cast it to any type using unsafeCast

/* simulate match expression
  x = match { | False => return 77; | True => W(22) }
*/
function elimBool1(b:Bool) -> word {
   let x : W;
   x = W(1);
   match b {
      // this works
      | False => x = unsafeCast(ereturn(77));
      // but this does not - unknown intermediate type
      // | False => x = unsafeCast(unsafeCast(ereturn(77)));
      // what about "return(return 77)"?
      // this does not work
      // | False => x = ereturn(ereturn(77));
      // this works
      //  | False => x = unsafeCast(ereturn(ereturn(77)));
      // this does not work (monomorphisation fails):
      //  | False => x = unsafeCast(ereturn(unsafeCast(ereturn(77))));
      
      | True  => x = W(22);
   };

   match x {
     | W(y) => return y;
   };
   
}

// "semicolon"
function semi(x:a) -> U { return U;}

function unsafeCast(x:a) -> b {
let res: b; return res;
}


contract ExpReturn {
  function main() -> word {
    return elimBool1(False);
    // return elimBool1(True);
  }
}
