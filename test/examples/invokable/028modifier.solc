function add1(x) {
  return addW(x,1);
}

function addW(x: Word, y:Word) -> Word {
   let res : Word;
   assembly {
       res := add(x, y)
    };
    return res;
}

class self : Invokable(args, ret) {
    function invoke (s:self,  a:args) -> ret;
}


/* Manual translation of:
contract Id1 {
  // modifier calls its argument and adds one to result
  function add1mod(f) {
    return lam(a) { return add1(f(a)); }
  }

  function foo(x) {
     return addW(x,2);
  }

  function main() {
    let bar = add1mod(foo);
    return bar(39);
  }
}
*/

function foo(x:Word) -> Word {
    return addW(x, 2);
}

data FooToken = FooToken

instance FooToken:Invokable(Word, Word) {
  function invoke(self:FooToken, arg: Word) -> Word {
    return foo(arg);
  }
}

// lambda in add1mod captures a function
// so env contains the closure

forall f.(f: Invokable(Word,Word)) =>  function lam1impl (env : f, a:Word) {
  let f = env;
  return add1(invoke(f, a));
}

// we want:
// data Lam1Closure = f:Invokable(Word,Word) => Lam1Closure(f)

data Lam1Closure(f) = Lam1Closure(f)

/*
function extractEnv(clos: Lam1Closure(f)) -> f {
  match clos {
    | Lam1Closure(env) => return env;
    };
}
*/
instance (f:Invokable(Word,Word)) => Lam1Closure(f) : Invokable(Word,Word) {
  function invoke(clos, arg:Word) -> Word {
    match clos {
      | Lam1Closure(env) => return lam1impl(env, arg);
    };
  }
}

function add1mod(f) {
  return Lam1Closure(f);
}

contract Modifier {


function main() {
  let barClos = add1mod(FooToken);
  return invoke(barClos, 39);
}
}
