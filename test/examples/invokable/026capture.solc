/* Manual translation of:
contract Id1 {
  function main() {
    let y = 42;
    let nid = lam(x) {return addW(x,y);};
    return nid(17);
  }
}
*/

function addW(x: Word, y:Word) -> Word {
   let res : Word;
   assembly {
       res := add(x, y)
    };
    return res;
}

class self : Invokable(args, ret) {
    function invoke (s:self,  a:args) -> ret;
}

// env might be a tuple, here it is a single Word
function lam1impl(env: Word, x: c) -> c {
   let y = env;
   return addW(x,y);
}

data Lam1Closure(a) = Lam1Closure(Word)

instance Lam1Closure(a) : Invokable(a,Word) {
  function invoke(clos: Lam1Closure(a), arg:a) -> Word {
  match clos {
    | Lam1Closure(env) => return lam1impl(env, arg);
    };
  }
}


contract InvokeCapLam {
function main() {
  let y = 42;
  let clos = Lam1Closure(y);
  
  return invoke(clos, 17);
}
}
