/* Manual translation of:
contract Id1 {

  function foo() {
    let y = 42;
    let nid = lam(x) {return y;};
    return nid;
  }    
  function main() {
    return nid(17);
  }
}
*/

class self : Invokable(args, ret) {
    function invoke (s:self,  a:args) -> ret;
}

// env might be a tuple, here it is a single Word
function lam1impl(env: Word, x: c) -> c { return env; }

data Lam1Closure(a) = Lam1Closure(Word)

instance Lam1Closure(a) : Invokable(a,Word) {
  function invoke(clos: Lam1Closure(a), arg:a) -> Word {
  match clos {
    | Lam1Closure(env) => return lam1impl(env, arg);
    };
  }
}


contract InvokeCapLam {
function foo() {
  let y = 42;
  let clos = Lam1Closure(y);
  return clos;
}

function main() {
  
  return invoke(foo(), 17);
}
}
