
class  a : Neg {
   function neg(x:a) -> a;
}

data B = F | T
data Pair(a,b) = Pair(a,b)

instance B : Neg {
  function neg (x : B) { 
    match x {
    | F => return T;
    | T => return F; 
    }; 
  }
}

function fst (p) {
  match p {
  | Pair(x,y) => return x;
  };
}

function snd(p) {
  match p {
  | Pair(_,y) => return y;
  };
}

instance (a:Neg,b:Neg) => Pair(a,b):Neg {
  function neg(p) {
    return Pair(neg (fst(p)), neg(snd (p)));
  }
}

contract NegPair {

  function bnot(x) {
     match x {
     | T => return F;
     | F => return T;
     };
  }

  function fromB(b) {
    match b  {
    | F => return 0;
    | T => return 1;
    };
  }

  function main() { return  fromB(neg(F)); }
}
