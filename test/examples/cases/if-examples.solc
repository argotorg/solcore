function toBool(x) {
  match x {
  | 0 => return false;
  | _ => return true;
  }
}

function gt(x,y) {
  let res : word;
  assembly {
    res := gt(x,y)
  }
  return toBool(res);
}

function max(x,y) {
  let res : word;
  if (gt(x,y)) {
    res = x;
  } else {
    res = y;
  }
  return res;
}

/* Uncomment this after fixing #181
function not(x:bool) -> () {
  // let y: bool = x;
  if (x) { return false; }  else { return true; }
}
*/

function foo () {
  return lam (x) {
            if (gt(x,0)) {
                return true;
            } else {
                return false;
            }
         };
}

contract IfExamples {
/* Uncomment this after fixing #181
	 function main() -> bool {
	    let f = foo();
	   return not(f(42));
	   return not(true);
	 }
*/
	 function main() -> bool {
	   return false;
         }
}
