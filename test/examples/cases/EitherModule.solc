contract EitherModule {
  data Either(a,b) = Left(a) | Right(b);
  data List(a) = Nil | Cons(a,List(a));

  function either (f, g, x) {
    match x {
    | Left(a) => 
      return f(a) ; 
    | Right(b) => 
      return g(b);
    };
  }

  function lefts(xs) {
    match xs {
    | Nil => return Nil ;
    | Cons(y,ys) => 
      match y {
      | Left(z) => return Cons(z,lefts(ys)) ; 
      | Right(z) => return lefts(ys) ;
      };
    };
  }

  function foo0() {
    return either((lam (x) {return 1;}), (lam (x) {return 0;}), Right(1));
  }

  function foo1(z) {
    return either((lam (x) {return (primAddWord(1, z));}), (lam (x) {return 0;}), Right(1));
  }
}
