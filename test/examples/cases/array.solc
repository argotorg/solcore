pragma no-coverage-condition TAdd;

data Zero;
data Succ(a);

class self:TAdd(res) {}
instance (Zero, a):TAdd(a) {}
forall a b c . (b, a):TAdd(c) => instance (Succ(b), a):TAdd(Succ(c)) {}

class lhs:Eq(rhs) {}
instance a:Eq(a) {}

// this should work but doesnt: forall sizel sizer elem sizeout . (sizel, sizer):TAdd(sizeout)
// TODO: this panics during specialization
forall sizel sizer elem sizeout pairSizelSizer . pairSizelSizer:Eq((sizel, sizer)), pairSizelSizer:TAdd(sizeout) => function concat(lhs:memory(array(sizel, elem)), rhs:memory(array(sizer, elem))) -> memory(array(sizeout, elem)) {
    return memory(0) : memory(array(sizeout, elem)); // :D
}

data Itself(a) = ItselfRuntimeTag;

data array(size, elem) = array;
data memory(a) = memory(word);

class self:IndexAccessible (indexType, elementType){
    function set(self:self, ix:indexType, val:elementType);
    function at(self:self, ix:indexType) -> elementType;
}

class self:ToWord{
    function toWord(self:Itself(self)) -> word;
}

instance Zero : ToWord {
    function toWord(zero) { return 0; }
}

forall prev . prev:ToWord => instance Succ(prev) : ToWord {
    function toWord(self: Itself(Succ(prev))) {
        let returnVal : word = ToWord.toWord(ItselfRuntimeTag:Itself(prev));
        assembly {
            returnVal := add(1, returnVal)
        }
        return returnVal;
    }
}

class self:MemoryType {
    function load(ptr:word) -> self;
    function store(ptr:word, value:self);
}

instance word:MemoryType {
    function load(ptr:word) -> word {
        let val : word;
        assembly { val := mload(ptr) }
        return val;
    }
    function store(ptr:word, value:word) {
        assembly { mstore(ptr, value) }
    }
}

forall size elem . elem:MemoryType => instance memory(array(size, elem)) : IndexAccessible(word, elem) {
    function at(self, index) -> elem {
        let sizeValue = ToWord.toWord(ItselfRuntimeTag:Itself(size));

        assembly {
            if iszero(lt(index, sizeValue)) {
                revert(0, 0)
            }
        }

        match self {
            | memory(offset) =>
                let x = offset; // can't use this inside the assembly block :-(
                assembly {
                    index := add(x, mul(32, index))
                }
                return MemoryType.load(index);
        }
    }

    function set(self, index, val) {
        let sizeValue = ToWord.toWord(ItselfRuntimeTag:Itself(size));

        assembly {
            if iszero(lt(index, sizeValue)) {
                revert(0, 0)
            }
        }

        match self {
            | memory(offset) =>
            let x = offset; // can't use this inside the assembly block :-(
                assembly {
                    index := add(x, mul(32, index))
                }
                MemoryType.store(index, val);
        }
    }
}



contract Array {

    function main() {
        let arr : memory(array(Succ(Succ(Succ(Succ(Zero)))), word)) = memory(42);  // = (1,2,3,4,5,6,7,8,9,10);
        IndexAccessible.set(arr, 4, 33);

        return IndexAccessible.at(arr, 4);
    }
}
